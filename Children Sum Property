/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode < T > *left;
        BinaryTreeNode < T > *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
void balance(BinaryTreeNode < int > * root){
    if(root){
        int left = 0, right = 0;
        if(root->left)
            left = root->left->data;
        if(root->right)
            right = root->right->data;
        if(root->data > left+right){
            int diff = root->data-left-right;
            if(root->left && root->right){
                if(diff %2)
                    root->left->data += diff/2+1;
                
                else
                    root->left->data += diff/2;      
                
                balance(root->left);
    
                root->right->data += diff/2;
                balance(root->right);
            }
            else if(root->left){
                root->left->data += diff;
                balance(root->left);
            }
            else if(root->right){
                root->right->data += diff;
                balance(root->right);
            }
        }
    }
}
int find(BinaryTreeNode < int > * root){
    if(!root)
        return 0;
    int left = find(root->left);
    int right = find(root->right);
    if(root->data < left+right)
        root->data = left+right;
    balance(root);
    return root->data;
}

void changeTree(BinaryTreeNode < int > * root) {
    // Write your code here.
    
    find(root);
}  

#include<bits/stdc++.h>
void addNum(priority_queue<double> &maxHeap,
priority_queue<double,vector<double>,greater<double>> &minHeap,int num) {
        if(minHeap.size() == 0 && maxHeap.size()==0){
            maxHeap.push(num);
        }
        else if(num > maxHeap.top())
            minHeap.push(num);
        else
            maxHeap.push(num);
        int x= minHeap.size()-maxHeap.size();
        if(abs(x) > 1){
            if(minHeap.size() > maxHeap.size())
            {
                maxHeap.push(minHeap.top());
                minHeap.pop();
            }
            else{
                minHeap.push(maxHeap.top());
                maxHeap.pop();
            }  
        }
    }
    
    double findMedian(priority_queue<double> &maxHeap,
priority_queue<double,vector<double>,greater<double>> &minHeap) {
        // cout<<minHeap.size() <<" "<< maxHeap.size()<<endl;
        if(minHeap.size() > maxHeap.size())
            return minHeap.top();
        else if(minHeap.size() < maxHeap.size())
            return maxHeap.top();
        else
            return (minHeap.top()+maxHeap.top())/2;
    }
vector<int> findMedian(vector<int> &arr, int n){
priority_queue<double> maxHeap;
priority_queue<double,vector<double>,greater<double>> minHeap;
    vector<int> ans;
	// Write your code here 
    for(auto i: arr)
    {
        addNum(maxHeap, minHeap, i);
        ans.push_back(findMedian(maxHeap, minHeap));
    }    
    return ans;
}

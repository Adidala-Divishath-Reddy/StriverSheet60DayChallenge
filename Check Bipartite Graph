#include<bits/stdc++.h>
bool isGraphBirpatite(vector<vector<int>> &graph) {
	// Write your code here.
        set<int> SET1, SET2;
        unordered_map<int, int> VertexSetNumber;
        vector<int> colors(graph.size(), 0);
        int x;
        for(int i=0; i<graph.size(); i++)
            for(int j=0; j<graph[0].size();j++){
            
            if(!graph[i][j])
                continue;
            graph[i][j] = 0;
            graph[j][i] = 0;
//             If both vertices are seen just now
            if(VertexSetNumber.find(i) == VertexSetNumber.end() && VertexSetNumber.find(j) == VertexSetNumber.end())
            {
                VertexSetNumber[i] = 1;
                VertexSetNumber[j] = 2;
                SET1.insert(i);
                SET2.insert(j);
                
            }
            else if(VertexSetNumber.find(i) == VertexSetNumber.end()){
                if(VertexSetNumber[j] == 1){
                    SET2.insert(i);
                    VertexSetNumber[i] = 2;
                }
                else{
                    SET1.insert(i);
                    VertexSetNumber[i] = 1;
                }
            }
            else if(VertexSetNumber.find(j) == VertexSetNumber.end()){
                if(VertexSetNumber[i] == 1){
                    SET2.insert(j);
                    VertexSetNumber[j] = 2;
                }
                else{
                    SET1.insert(j);
                    VertexSetNumber[j] = 1;
                }
            }
            else{
                if(VertexSetNumber[i] == VertexSetNumber[j])
                    return false;
            }

            
        }
    return true;

}

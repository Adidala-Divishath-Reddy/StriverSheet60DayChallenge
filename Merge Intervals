#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/
bool comp(vector<int> &a, vector<int> &b){
    return a[0] < b[0];
}
vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    // Write your code here.
    vector<vector<int>> ans;
        sort(intervals.begin(), intervals.end(), comp);
        // for(auto i: intervals)
        //     cout<<i[0]<<" "<<i[1]<<endl;
        // cout<<endl;
        int pointer_start=intervals[0][0], pointer_last= intervals[0][1], count=1;
        for(int i=0; i<intervals.size(); i++){
            if(i+1 == intervals.size())
                ans.push_back({pointer_start,pointer_last});
            else{
// case 1:______           (or)_____
//           ______                 ____   if intervals are like this
                if(intervals[i+1][0] <= pointer_last 
              && intervals[i+1][1] >= pointer_last)
                pointer_last = intervals[i+1][1];
// case 2: ________  (or) _______
//           ___              ___   if intervals are like this       
            else if(intervals[i+1][0] <= pointer_last 
              && intervals[i+1][1] <= pointer_last)
                pointer_last = pointer_last;
// case 3: ________
//                      _________ if intervals are like this
            else{
                ans.push_back({pointer_start,pointer_last});
                if(i+1 < intervals.size()){
                pointer_start = intervals[i+1][0];
                pointer_last= intervals[i+1][1];
                }
                }
            }
            
        }
        return ans;
}

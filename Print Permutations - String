#include<unordered_map>
vector<string> ans;
void find(string &s, string temp, unordered_map<char,int> &um, vector<int> &visited){
    if(temp.length() == s.length()){
        ans.push_back(temp);
        return;
    }
    
    for(int i=0; i<s.length();i++){
        //If that indexed char is already added. Then we should not add it.
        if(!visited[i]){
//             Make that indexed char as visited. So that next we will form permutations from unvisited chars.
        visited[i] = 1;
        find(s, temp+s[i], um,visited);
        visited[i] = 0;
        }
    }
}
vector<string> findPermutations(string &s) {
    // Write your code here.
    unordered_map<char,int> um;
    vector<int> visited(s.length(),0);
    ans.clear();
    find(s,"",um, visited);
    return ans;
}

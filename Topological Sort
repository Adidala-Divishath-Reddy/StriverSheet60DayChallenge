#include<unordered_map>
#include<list>
#include<stack>

void dfs(vector<int> &visited, int vertex, 
         unordered_map<int, list<int>> &um,stack<int> &s){
        if(!visited[vertex]){
            visited[vertex] = 1;
             for(auto i: um[vertex])
                 if(!visited[i])
                    dfs(visited,i,um, s);
            s.push(vertex);
         }
}
vector<int> topologicalSort(vector<vector<int>> &edges, int V, int e)  {
    // Write your code here
    vector<int> ans;
stack<int> s;
    vector<int> visited(V,0);
    unordered_map<int, list<int>> um;
    for(auto i: edges)
        um[i[0]].push_back(i[1]);
    
    for(int i=0; i<V;i++)
        if(!visited[i])
            dfs(visited,i,um,s);
        
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    return ans;
    
}

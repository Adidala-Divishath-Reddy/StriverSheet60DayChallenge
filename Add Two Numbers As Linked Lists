#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
	        Node *next;
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
        };

*****************************************************************/

Node *addTwoNumbers(Node *l1, Node *l2)
{
    // Write your code here.
    Node* h1 = l1, *h2 = l2, *l3 = NULL,*curr =NULL, *node=NULL;
        int prev = 0;
        while(h1 && h2){
            int sum = h1->data + h2->data+prev;
            prev = 0;
            if(sum - 9 > 0)
            {
                node = new Node(sum - 10);
                // cout<< node->data<<endl;
                prev = 1;
            }
            else{
                node = new Node(sum);
            }
                if(!l3)
                    l3 = curr = node;
                else{
                    curr->next = node;
                    curr = node;
                }
            h1= h1->next;
            h2 = h2->next;
        }
        while(h1){
            int sum = h1->data + prev;
            prev = 0;
            if(sum - 9 > 0)
            {
                node = new Node(sum - 10);
                // cout<< node->val<<endl;
                prev = 1;
            }
            else{
                node = new Node(sum);
            }
                if(!l3)
                    l3 = curr = node;
                else{
                    curr->next = node;
                    curr = node;
                }
            h1= h1->next;
        }
        while(h2){
            int sum = h2->data + prev;
            prev = 0;
            if(sum - 9 > 0)
            {
                node = new Node(sum - 10);
                // cout<< node->val<<endl;
                prev = 1;
            }
            else{
                node = new Node(sum);
            }
                if(!l3)
                    l3 = curr = node;
                else{
                    curr->next = node;
                    curr = node;
                }
            h2= h2->next;
        }
        if(prev == 1){
            node = new Node(1);
                if(!l3)
                    l3 = curr = node;
                else{
                    curr->next = node;
                    curr = node;
                }
        }
        return l3;
}

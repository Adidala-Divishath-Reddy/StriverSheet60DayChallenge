struct Node{
   Node* links[26];
   int cntEnd = 0;
   int cntPrefix = 0;
   
   bool containsKey(char ch)
   {
       return links[ch - 'a'] != NULL;
   }
   
   Node* get(char ch)
   {
       return links[ch - 'a'];
   }
   
   void setKey(Node* node , char ch)
   {
       links[ch - 'a'] = node;
   }
   
   void IncreaseEnd()
   {
       cntEnd++;
   }
   
   void Increaseprefix()
   {
       cntPrefix++;
   }
   
   void deleteEnd()
   {
       cntEnd--;
   }
   
   void reducePrefix()
   {
       cntPrefix--;
   }
   
   int getEnd() {
       return cntEnd;  
   }
   int getPrefix() {
       return cntPrefix;  
   }
};

class Trie{
   
   private: Node* root;
   
   public:

   Trie(){
       root = new Node();
   }

   void insert(string &word){
       Node* node = root;
       int size = word.size();
       
       for(int i=0;i<size;i++)
       {
           char ch = word[i];
           if(!node->containsKey(ch))
           {
              node->setKey(new Node() , ch);
           }
           node = node->get(ch);
           node->Increaseprefix();
       }
       node->IncreaseEnd();
   }

   int countWordsEqualTo(string &word){
       Node* node = root;
       int size = word.size();
       for(int i=0;i<size;i++)
       {
           char ch = word[i];
           if(node->containsKey(ch))
           {
               node = node->get(ch);
           }else {
               return 0;
           }
       }
       
       return node->getEnd();
   }

   int countWordsStartingWith(string &word){
       Node* node = root;
       int size = word.size();
       for(int i=0;i<size;i++)
       {
           char ch = word[i];
           if(node->containsKey(ch))
           {
               node = node->get(ch);
           }else {
               return 0;
           }
       }
       
       return node->getPrefix();
   }

   void erase(string &word){
        Node* node = root;
        int size = word.size();
        for(int i=0;i<size;i++)
        {
            char ch = word[i];
            if(node->containsKey(ch))
            {
                node = node->get(ch);
                node->reducePrefix();
            }else{
                return;
            }
        }
       
       node->deleteEnd();
   }
};

#include<unordered_map>
#include<algorithm>
bool comp(pair<int,int> &a, pair<int,int> &b){
    return a.second != b.second ? a.second > b.second : a.first<b.first;
}
vector<int> KMostFrequent(int n, int k, vector<int> &arr)
{
    // Write your code here.
    unordered_map<int,int> um;
    vector<pair<int,int>> ans;
    vector<int> answer;
    int maxi = 0, max_ele = -1;
    for(int i=0; i<n; i++)
        um[arr[i]]++;

    for(auto i: um)
        ans.push_back({i.first,i.second});
    sort(ans.begin(),ans.end(), comp);
        
//sort such a way that max occured element will occur first. If two elements have same frequency, small element will occur first
    
    if(k > ans.size())
    {
        for(auto i: ans)
            answer.push_back(i.first);
        
    }
    else{
    for(int i=0; i<k; i++)
        answer.push_back(ans[i].first);
    }
     
    //They need output to be sorted.
    sort(answer.begin(),answer.end());
    return answer;//     return ans;
}

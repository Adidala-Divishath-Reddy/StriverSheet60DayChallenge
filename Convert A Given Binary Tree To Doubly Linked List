/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
//Basic plan is to flatten the RST and LST first and then link LST's last node with root and then link root with head start node of flattended RST
pair<pair<BinaryTreeNode<int>*,BinaryTreeNode<int>*>,int> find(BinaryTreeNode<int>* root){
    if(!root)
        return {{NULL, NULL},0};
    pair<pair<BinaryTreeNode<int>*,BinaryTreeNode<int>*>,int> left = find(root->left);
    pair<pair<BinaryTreeNode<int>*,BinaryTreeNode<int>*>,int> right = find(root->right);
    
    if(!left.second && !right.second)
        return {{root,root}, 1};
    else if(!left.second)
    {
        root->right = right.first.first;
        right.first.first->left = root;
        return {{root, right.first.second}, 1+right.second};
    }
    else if(!right.second)
    {
        root->left = left.first.second;
        left.first.second->right = root;
        return {{left.first.first, root}, 1+left.second};
    }
    else{
        root->left = left.first.second;
        left.first.second->right = root;
        root->right = right.first.first;
        right.first.first->left = root;
        return {{left.first.first, right.first.second}, 1 + left.second + right.second};
    }
}
BinaryTreeNode<int>* BTtoDLL(BinaryTreeNode<int>* root) {
    // Write your code here
    return find(root).first.first;
}

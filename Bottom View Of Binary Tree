/*************************************************************
 
    Following is the Binary Tree node structure.

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/
#include<bits/stdc++.h>

void find(BinaryTreeNode<int> * root, unordered_map<int,int> &lastNodeInThatLevel, int level){
    if(!root)
        return;
    lastNodeInThatLevel[level] = root->data;
    find(root->left, lastNodeInThatLevel, level-1);
    find(root->right, lastNodeInThatLevel, level+1);
    
}
vector<int> bottomView(BinaryTreeNode<int> * root){

    // Write your code here.
    unordered_map<int,int> lastNodeInThatLevel;
    queue<pair<BinaryTreeNode<int> *,int>> q;
    int LengthOfLeftMost = 0, LengthOfRightMost=0;
    BinaryTreeNode<int> * temp = root->left;
    while(temp){
        temp = temp->left;
        LengthOfLeftMost++;
    }
    temp = root->right;
    while(temp){
        temp = temp->right;
        LengthOfRightMost++;
    }
    LengthOfLeftMost *=-1;
    for(int i=LengthOfLeftMost; i<=LengthOfRightMost; i++){
        lastNodeInThatLevel[i]=-1;//Initiallly we don't know last node in any level. So put -1.
    }
//     if(root){
//         find(root,lastNodeInThatLevel,0);
//     }
    temp = root;
    q.push({root,0});
    while(!q.empty()){
        temp = q.front().first;
        
        lastNodeInThatLevel[q.front().second] = temp->data;
        if(temp->left)
        q.push({temp->left,q.front().second-1});
        if(temp->right)
        q.push({temp->right,q.front().second+1});
        q.pop();
    }
    vector<int> ans;
    for(int i=LengthOfLeftMost; i<=LengthOfRightMost; i++)
        ans.push_back(lastNodeInThatLevel[i]);
    return ans;
    
}

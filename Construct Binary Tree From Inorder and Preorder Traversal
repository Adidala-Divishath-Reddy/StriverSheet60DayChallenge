/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
TreeNode<int> * FormTree(vector<int> &inorder, vector<int> &preorder, int InSt, int InEnd, int PreSt, int PreEnd, unordered_map<int, int> &InorderNodeIndex){
    if(PreSt > PreEnd || InSt > InEnd)
        return NULL;
    
    TreeNode<int> * root = new TreeNode<int>(preorder[PreSt]);
    int numsLeft = InorderNodeIndex[preorder[PreSt]] - InSt;
    root->left = FormTree(inorder, preorder, InSt, InorderNodeIndex[preorder[PreSt]]-1, PreSt+1, PreSt+numsLeft, InorderNodeIndex);
    root->right = FormTree(inorder, preorder, InorderNodeIndex[preorder[PreSt]]+1, InEnd, PreSt+numsLeft+1, PreEnd, InorderNodeIndex);
    return root;
}
TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	//    Write your code here
    unordered_map<int, int> InorderNodeIndex;
    for(int i=0; i<inorder.size(); i++)
        InorderNodeIndex[inorder[i]] = i;
    
    return FormTree(inorder, preorder, 0, inorder.size()-1, 0, preorder.size()-1, InorderNodeIndex);
}

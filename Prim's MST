#include<queue>
#include<unordered_map>
#include<set>
#include<list>
#include<limits.h>
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // Write your code here.
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> pq;
    unordered_map<int, list<pair<int,int>>> um;
    vector<int> key(n+1,INT_MAX), parent(n+1,-1);
    vector<bool> AddedToMST(n+1,false);
    vector<pair<pair<int, int>, int>> SpanningTree;
    for(auto i: g){
//         To remove self loops
        if(i.first.first == i.first.second)
            continue;
//         pq.push({i.second,i.first.second});
        um[i.first.first].push_back({i.first.second, i.second});
        um[i.first.second].push_back({i.first.first, i.second});
    }
    
    pair<int, int> MinEdge;
    
//     Taka source as 1st node.Index starting from 1
    key[1] = 0;
    parent[1] = -1;
    pq.push({0,1});
    
    while(!pq.empty()){
        MinEdge = pq.top();
        pq.pop();
        
        int u = MinEdge.second;
        
        
        AddedToMST[u]= true;
        for(auto i: um[u]){
            int v = i.first;
            int weight = i.second;
            if(!AddedToMST[v] && key[v] > weight){
                key[v] = weight;
                parent[v] = u;
                pq.push({weight, v});
            }
        }
    }
    for(int i=2; i<=n; i++)
        SpanningTree.push_back({{parent[i], i}, key[i]});
    
    return SpanningTree;
    
}

/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
//0 indicate target leaf is not found. 1 indicates, found the leaf and do following things.
// int find(TreeNode<int> *root, TreeNode<int> *parent, TreeNode<int> *target){
//     if(!root)
//         return 0;
//     if(root->data == target->data){
// //         cout<<"pointing to:"<<root<<endl;
//         root->left = parent;
//         return 1;
//     }
//     int left = find(root->left, root, target);
//     if(left==1){
//         root->left = NULL;
//         return 1;
//     }
//     int right  = find(root->right, root, target);
//     if(right==1)
//     {
//         root->right = root->left;
//         root->left = parent;
//         return 1;
//     }
//     return 0;
    
// }
// TreeNode<int> * invertBinaryTree(TreeNode<int> *root, TreeNode<int> *leaf)
// {
	// Write your code here.
//     if(!root)
//         return NULL;
    
//     TreeNode<int> *target = leaf;
// //     cout<<"calling of:"<<(target == leaf)<<endl;
//     find(root, NULL, target);
//     return target;
#include<bits/stdc++.h>
void helper(TreeNode<int>* root,TreeNode<int>*leaf,stack<pair<TreeNode<int>*,bool>> &st,bool prev){

   if(!st.empty() and st.top().first==leaf)return;

   if(root==NULL)return ;

   st.push({root,prev});

   helper(root->left,leaf,st,true);

   helper(root->right,leaf,st,false);

   if(!st.empty() and st.top().first->data!=leaf->data)st.pop();

}

TreeNode<int> * invertBinaryTree(TreeNode<int> *root, TreeNode<int> *leaf)

{

   // Write your code here.

   //L=1,R=0

   stack<pair<TreeNode<int>*,bool>>st;

   helper(root,leaf,st,false);

   bool prevDir =st.top().second;

 st.pop();

   TreeNode<int>* t=leaf;

   while(!st.empty()){

       if(prevDir==true){

           st.top().first->left=NULL;

           t->left=st.top().first;

       }

       else{

           st.top().first->right=st.top().first->left;

           st.top().first->left=NULL;

           t->left=st.top().first;

       }

       t=st.top().first;

       prevDir=st.top().second;

       st.pop();

   }

   if(leaf->right){

       leaf->left=leaf->right;

       leaf->right=NULL;

   }

   return leaf;

   }

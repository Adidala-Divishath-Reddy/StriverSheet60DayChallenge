bool is_palindrome(string &s, int start, int end){
    while(start<=end)
        if(s[start++] != s[end--])
            return false;
    
    return true;
}
void func(int index, string &s, vector<vector<string>> &answer, vector<string> &path){
    if(index == s.length()){
        answer.push_back(path);
        return;
    }
    for(int i = index; i<s.length(); i++){
        if(is_palindrome(s,index, i)){
        path.push_back(s.substr(index, i-index+1));
        func(i+1, s, answer, path);
        path.pop_back();
        }
    }
}

vector<vector<string>> partition(string &s) 
{
    // Write your code here.
    vector<vector<string>> answer;
    vector<string> path;
    func(0, s, answer, path);
    return answer;
}

Best and easy approach:-

#include<queue>
vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{
    //    Write your code here.
    deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    
}


(OR)


#include<list>
vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{
    //    Write your code here.
    int n = nums.size(),index=0;
    k = min(k, n);
    list<int> l;
    vector<int> ans;
    for(int i=0; i<k; i++){
        index = 0;
        for(auto ele: l){
//             If we find an element which is less than or equal to the nums[i], then obviously all elements after that element will be less than or equal to nums[i]. So neglect all those.
            if(nums[ele] <= nums[i]){
                l.resize(index);
                break;
            }
//             If element in list is greater than nums[i], then we will put this nums[i] in next place why because this element might become max in next sliding window.
            index++;
         }
         l.push_back(i);
    }
    ans.push_back(nums[l.front()]);
    for(int i=k; i<nums.size();i++){
        if(l.front() == i-k)
            l.pop_front();
        index = 0;
        for(auto ele: l){
            if(nums[ele] <= nums[i]){
                l.resize(index);
                break;
            }
            index++;
         }
         l.push_back(i);
        ans.push_back(nums[l.front()]);
    }
    return ans;
    
}

/************************************************************
    Following is the Binary Search Tree node structure
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

//simple logic. Inorder will give sorted ascending order. So u travel in reverse inorder to get descending order. Then kth element which will be explored will be the kth largest element.  
void Inorder(TreeNode<int>* root, int &k, bool &found, int &ans){
    if(root){
        if(found)
            return;
        Inorder(root->right, k, found, ans);
        
        if(found)
            return;
        k--;
        if(k==0){
            ans = root->data;
            found = true;
        }
        Inorder(root->left, k, found, ans);
    }
}
int KthLargestNumber(TreeNode<int>* root, int k) 
{
    // Write your code here.
    int ans = -1;
    bool found = false;
    Inorder(root,k, found, ans);
    return ans;
}

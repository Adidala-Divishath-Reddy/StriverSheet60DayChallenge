bool isValid(int row , int color, vector<vector<int>> &mat, vector<int> &colors){
//     Check whether it's adjacent nodes have same color or no. If have return false, else return true;
    for(int col = 0; col<mat[0].size(); col++)
        if(mat[row][col] && row!=col && colors[col] == color)
            return false;
    return true;
}
bool solve(vector<vector<int>> &mat, int m, vector<int> &colors){
    for(int row=0; row<mat.size(); row++)
        if(!colors[row]){
            for(int color=1; color<=m;color++){
                if(isValid(row, color, mat, colors)){
                    colors[row] = color;
//                     After giving a color to a node, see whether by assigning that color do we get the answer or not. If not try with other color by removing it's color.
                    if(solve(mat, m, colors))
                        return true;
//                     We are removing the color.
                    colors[row] = 0;
                }
//          Even after trying all possibilities if we are not able to color the node, then we will say answer as "NO".
            return false;
        }

    return true;
}

string graphColoring(vector<vector<int>> &mat, int m) {
    // Write your code here

    vector<int> colors(mat.size(),0);
    if(solve(mat, m, colors))
        return "YES";
    return "NO";

}

#include<algorithm>
bool comp(pair<double,int> &a, pair<double,int> &b){
    return a.first > b.first;
}
double maximumValue (vector<pair<int, int>>& items, int n, int w)
{
    // Write your code here.
    // ITEMS contains {weight, value} pairs.
    vector<pair<double,int>> valueToWeights;
    double temp;
    for(int i=0; i<n; i++){
        temp = (double)items[i].second/(double)items[i].first;
//         cout<<items[i].second/items[i].first<<endl;
        valueToWeights.push_back({temp, i});
    }
    
    double profit=0;
    sort(valueToWeights.begin(), valueToWeights.end(),comp);

    for(auto i:valueToWeights){
        if(!w)
            break;
        if(w >= items[i.second].first){
            profit +=  items[i.second].second;
           w -= items[i.second].first;
        }
        else{
            profit += (double)items[i.second].second * ((double)w/(double)items[i.second].first);
            w=0;
        }
        
//         cout<< i.first<<" "<<i.second<<" "<<w<<" "<<profit<<endl;
    }
    return profit;
}
